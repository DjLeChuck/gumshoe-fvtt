name: CI/CD

on:
  push

env:
  PACKAGE_NAME: "investigator"
  MANIFEST_NAME: "system.json"
  MANIFEST_PATH: "public/${MANIFEST_NAME}"
  ZIP_FILE_NAME: "${PACKAGE_NAME}.zip"

  PACKAGE_BASE: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}"
  PACKAGE_LATEST_BASE: "${PACKAGE_BASE}/latest"
  PACKAGE_VERSION_BASE: "${PACKAGE_BASE}/${CI_COMMIT_TAG}"
  PACKAGE_LATEST_MANIFEST: "${PACKAGE_LATEST_BASE}/${MANIFEST_NAME}"
  PACKAGE_LATEST_DOWNLOAD: "${PACKAGE_LATEST_BASE}/${ZIP_FILE_NAME}"
  PACKAGE_VERSION_MANIFEST: "${PACKAGE_VERSION_BASE}/${MANIFEST_NAME}"
  PACKAGE_VERSION_DOWNLOAD: "${PACKAGE_VERSION_BASE}/${ZIP_FILE_NAME}"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Instrumentation
        run: |
          pwd
          ls -l
          cat tsconfig.json
          npx tsc --version
          export
          pnpm --version
  
      - name: Activate pnpm
        run: corepack enable

      - name: Install dependencies
        run: pnpm i

      - name: Test
        run: pnpm test

      - name: Build
        run: pnpm package


  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: release
    if: github.ref_type == 'tag'
    steps:
      - id: get_tag_version
        uses: actions-ecosystem/action-regex-match@v2.0.2
        with:
          regex: '^refs/tags/v\d+\.\d\+\.\d+'
          text: ${{ github.ref }}

      - id: get_prerelease_tag_version
        uses: actions-ecosystem/action-regex-match@v2.0.2
        if: steps.get_tag_version.outputs.match
        with:
          regex: '^refs/tags/v\d+\.\d\+\.\d+-[a-z0-9\-_\.]+'
          text: ${{ github.ref }}
  
      - name: Instrument tags capture
        run: |
          echo "tag version: ${{ steps.get_tag_version.outputs.match }}"
          echo "prerelease tag version: ${{ steps.get_prerelease_tag_version.outputs.match }}"


      # - name: Update Release With Files
      #   uses: ncipollo/release-action@v1
      #   if: env.is_version_tag
      #   with:
      #     allowUpdates: true
      #     name: ${{ github.event.release.name }}
      #     draft: ${{ github.event.release.unpublished }}
      #     prerelease: ${{ github.event.release.prerelease }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     artifacts: './module.json, ./module.zip'
      #     tag: ${{ github.event.release.tag_name }}
      #     body: ${{ github.event.release.body }}
